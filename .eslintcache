[{"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\index.js":"1","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\serviceWorker.js":"2","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\App.js":"3","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\utils\\theme.js":"4","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\utils\\constants.js":"5","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\views\\CollectorDashboard.js":"6","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\GridHeader.js":"7","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\Footer.js":"8","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\GridArea.js":"9","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\Header.js":"10","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\TableComponent.js":"11","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\TableGrid.js":"12","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\GridModalButtons.js":"13","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\utils\\formatter.js":"14","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\AddButton.js":"15","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\DeleteButton.js":"16","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\EditButton.js":"17","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\CorrespondenceButton.js":"18","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\PredictButton.js":"19"},{"size":776,"mtime":1589950107326,"results":"20","hashOfConfig":"21"},{"size":5226,"mtime":1589284044061,"results":"22","hashOfConfig":"21"},{"size":1318,"mtime":1616321297225,"results":"23","hashOfConfig":"21"},{"size":475,"mtime":1591529983724,"results":"24","hashOfConfig":"21"},{"size":144,"mtime":1616395451975,"results":"25","hashOfConfig":"21"},{"size":430,"mtime":1617077409437,"results":"26","hashOfConfig":"21"},{"size":242,"mtime":1616320276962,"results":"27","hashOfConfig":"21"},{"size":1243,"mtime":1589331154773,"results":"28","hashOfConfig":"21"},{"size":561,"mtime":1616321122964,"results":"29","hashOfConfig":"21"},{"size":591,"mtime":1616320277563,"results":"30","hashOfConfig":"21"},{"size":9242,"mtime":1617015527345,"results":"31","hashOfConfig":"21"},{"size":5176,"mtime":1617072742130,"results":"32","hashOfConfig":"21"},{"size":1951,"mtime":1616325274177,"results":"33","hashOfConfig":"21"},{"size":2199,"mtime":1616306638190,"results":"34","hashOfConfig":"21"},{"size":8894,"mtime":1627461242033,"results":"35","hashOfConfig":"21"},{"size":3719,"mtime":1616325197875,"results":"36","hashOfConfig":"21"},{"size":4545,"mtime":1616341572193,"results":"37","hashOfConfig":"21"},{"size":628,"mtime":1616320236875,"results":"38","hashOfConfig":"21"},{"size":632,"mtime":1616320277661,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"1nui8xu",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"43"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\index.js",["87","88"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport theme from '../src/utils/theme';\r\nimport { withStyles, MuiThemeProvider } from '@material-ui/core/styles';\r\nReactDOM.render(\r\n    <MuiThemeProvider theme={theme}>\r\n      <App />\r\n    </MuiThemeProvider>,\r\n  document.getElementById('root')\r\n);\r\n/*\r\nCRACKED BY ILLUMINATI\r\nTRUST US AND UNCOMMENT THIS CODE ONCE YOU SETUP YOUR REDUX STORE ;-)\r\n ReactDOM.render(\r\n   <Provider store={store}>\r\n     <MuiThemeProvider theme={theme}>\r\n       <App />\r\n     </MuiThemeProvider>\r\n   </Provider>,\r\n   document.getElementById('root')\r\n );\r\n*/\r\nserviceWorker.unregister();\r\n\r\n\r\n",["89","90"],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\serviceWorker.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\App.js",["91","92","93","94"],"import React from 'react';\r\nimport './App.css';\r\nimport theme from '../src/utils/theme';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport CollectorDashboard from '../src/views/CollectorDashboard';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ROLL_NUMBER } from '../src/utils/constants';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  '@global': {\r\n    '*::-webkit-scrollbar': {\r\n      width: '0.4em',\r\n      height: '0.4em',\r\n    },\r\n    '*::-webkit-scrollbar-track': {\r\n      '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\r\n    },\r\n    '*::-webkit-scrollbar-thumb': {\r\n      backgroundColor: '#6D7183',\r\n      outline: '1px solid slategrey',\r\n    },\r\n  },\r\n  mainBackground: {\r\n    background: theme.palette.primary.main,\r\n    height: '100vh',\r\n    width: '100vw',\r\n    overflow: 'hidden',\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100,\r\n  },\r\n}));\r\nconst App = () => {\r\n  console.log('theme', theme);\r\n  const classes = useStyles();\r\n  return (\r\n    <div className='App'>\r\n      <Router basename='/1805393'>\r\n        {/* {`/${ROLL_NUMBER}`} */}\r\n        {/* <Route exact path=\"/\" component={CollectorDashboard} /> */}\r\n        <CollectorDashboard />\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\utils\\theme.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\utils\\constants.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\views\\CollectorDashboard.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\GridHeader.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\Footer.js",["95","96","97"],"import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport theme, { pxToRem } from '../utils/theme';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography, Grid } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n  mainBackground: {\r\n    background: theme.palette.primary.main,\r\n    height: '100vh',\r\n    width: '100vw'\r\n  },\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: '100%',\r\n    background: '#252C48',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column'\r\n  },\r\n  titleName: { fontSize: pxToRem(30), color: 'white' },\r\n  subTitleName: {\r\n    fontSize: pxToRem(20),\r\n    color: 'white'\r\n  }\r\n});\r\nfunction Footer(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <Grid\r\n      item\r\n      xs={12}\r\n      style={{\r\n        display: 'flex',\r\n        marginRight: '5px',\r\n        justifyContent: 'flex-end',\r\n        height: \"4.5vh\",\r\n        alignItems: \"flex-end\"\r\n      }}\r\n    >\r\n      <Typography style={{ color: 'white' }}>\r\n        Copyright 2020 Highradius. All Rights Reserved.\r\n      </Typography>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(Footer);\r\n","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\GridArea.js",["98"],"import React from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport GridModalButtons from './GridModalButtons'\r\nimport TableGrid from './TableGrid'\r\nimport TableComponent from './TableComponent'\r\n\r\n\r\n// import './GridArea.css'\r\n\r\nfunction GridArea() {\r\n\r\n    return (\r\n        // <div className='grid__area'> \r\n        <Paper style={{margin: \"2vw\", backgroundColor: \"#273d49cc\"}} elevation={3}>\r\n            <GridModalButtons/>\r\n            {/* <TableGrid/> */}\r\n            <TableComponent/>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default GridArea\r\n","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\Header.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\TableComponent.js",["99","100","101","102","103","104","105","106","107","108","109","110","111","112"],"import React from 'react';\r\n// import UseTable from './UseTable';\r\nimport { CircularProgress, Box, Checkbox, Button, Paper, makeStyles, TableHead , Table, TableBody, TableRow, TableCell, Toolbar, InputAdornment, TextField, InputBase } from '@material-ui/core';\r\n// import DataTable from './DataTable';\r\nimport {useState} from 'react';\r\nimport axios from 'axios';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n// import clsx from 'clsx';\r\nimport formatter from '../utils/formatter';\r\n\r\nfunction TableComponent() {\r\n    \r\n    let [isNext, isNextFunc] = React.useState(false)\r\n    let [pageCount, setCount] = React.useState(1)\r\n    let [responseData, setResponseData] = useState([])\r\n    const url = `http://localhost:8080/1805262/FetchData.do?page=${pageCount}`;\r\n\r\n    const loadMoreData = () => {\r\n        setCount(pageCount + 1);\r\n    };\r\n\r\n    // console.log(pageCount);\r\n    React.useEffect( () => {\r\n    axios\r\n        .get(url)\r\n        .then((response) => {\r\n            setResponseData([...responseData, ...response.data]);\r\n            isNextFunc(true)\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n    },[pageCount]);\r\n    // console.log(\"After axios \" ,pageCount);\r\n\r\n    const useStyles = makeStyles(theme => ({ \r\n        container: {\r\n            maxWidth: \"100%\",\r\n            maxHeight: 350,\r\n          },\r\n        TRow:\r\n        {\r\n            '&:nth-of-type(even)': { backgroundColor: '#283A46', },\r\n            borderBottom: \"1px solid #283A46\",\r\n        },\r\n\r\n        Tbl:\r\n        {\r\n            marginLeft: '24px',\r\n            marginRight: '10px',\r\n            // maxHeight: '500px',\r\n            overflow: 'scroll',\r\n        },\r\n\r\n        TCell:\r\n        {\r\n            fontSize: '15.1px',\r\n            fontFamily: \"normal normal normal 20px/24px Ubuntu\",\r\n            borderBottom: 'none',\r\n            color: '#FFFFFF',\r\n        },\r\n    }));\r\n    const classes= useStyles();\r\n\r\n    const [order, setOrder] = useState();\r\n    const [orderBy, setOrderBy] = useState();\r\n    const [selected, setSelected] = useState([]);\r\n    const [editActive, setEditActive] = useState( false );\r\n    const [active, setActive] = useState( false );\r\n\r\n\r\n\r\n    const handleClick = (event, id) => \r\n    {\r\n        const selectedIndex = selected.indexOf( id );\r\n        let newSelected = [];\r\n    \r\n        if (selectedIndex === -1) \r\n        {   newSelected = newSelected.concat(selected, id );    } \r\n\r\n        else if (selectedIndex === 0) \r\n        {   newSelected = newSelected.concat(selected.slice(1));    } \r\n\r\n        else if (selectedIndex === selected.length - 1) \r\n        {   newSelected = newSelected.concat(selected.slice(0, -1));    } \r\n\r\n        else if (selectedIndex > 0) \r\n        {   newSelected = newSelected.concat( selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1),);    }\r\n\r\n        \r\n        if( newSelected.length == 0 ) \r\n        {   setEditActive(false); setActive(false); }\r\n\r\n        else if( newSelected.length == 1)\r\n        {   setEditActive(true); setActive(true); }\r\n\r\n        else if( newSelected.length > 1)\r\n        {   setEditActive(false);   }\r\n\r\n        \r\n        setSelected(newSelected);\r\n    };\r\n\r\n    \r\n\r\n    const handleSortRequest = cellId => \r\n        {\r\n            const isAsc = orderBy === cellId && order === \"asc\";\r\n            setOrder(isAsc ? 'desc' : 'asc');\r\n            setOrderBy(cellId)\r\n        }\r\n\r\n        const handleSelectAllClick = (event) => \r\n        {\r\n\r\n            if (event.target.checked) \r\n            {\r\n\r\n              const newSelecteds = responseData.map((n) => n.doc_id);\r\n              setSelected(newSelecteds);\r\n              setEditActive(false);\r\n              setActive( true );\r\n              return;\r\n\r\n            }\r\n            setActive(false);\r\n            setSelected([]);\r\n        };\r\n\r\n        const isSelected = ( id ) => selected.indexOf( id ) !== -1;\r\n\r\n    return (\r\n            <div id=\"scrollableDiv\" style={{overflow: \"scroll\", height: \"70vh\", width:\"96vw\" }}>\r\n                <InfiniteScroll\r\n                    dataLength={responseData.length}\r\n                    next={loadMoreData}\r\n                    hasMore={isNext}\r\n                    loader={\r\n                        <div\r\n                        style={{ height: \"80%\", paddingLeft: \"5%\", overflow: \"hidden\" }}\r\n                        >\r\n                            <CircularProgress />\r\n                        </div>\r\n                    }\r\n                    scrollableTarget=\"scrollableDiv\"\r\n                >\r\n                    <Table className={classes.container}>\r\n                    <TableHead stickyHeader aria-label=\"sticky table\">\r\n                        \r\n                        <TableRow className={classes.TRow} stickyHeader aria-label=\"sticky table\">\r\n                            <TableCell padding=\"checkbox\" className={ classes.TCell }>\r\n                                <Checkbox\r\n                                    indeterminate={ selected.length > 0 && selected.length < responseData.length}\r\n                                    checked={ responseData.length > 0 && selected.length === responseData.length}\r\n                                    onChange={ handleSelectAllClick }\r\n                                    \r\n                                />\r\n                        \t</TableCell>\r\n                            <TableCell style={{color: \"#97A1A9\"}} className={classes.TCell}>\r\n                                Customer Name\r\n                            </TableCell>\r\n                            <TableCell style={{color: \"#97A1A9\"}} className={classes.TCell}>\r\n                                Customer #\r\n                            </TableCell>\r\n                            <TableCell style={{color: \"#97A1A9\"}} className={classes.TCell}>\r\n                                Order #\r\n                            </TableCell>\r\n                            <TableCell style={{color: \"#97A1A9\"}} className={classes.TCell}>\r\n                                Order Amount\r\n                            </TableCell>\r\n                            <TableCell style={{color: \"#97A1A9\"}} className={classes.TCell}>\r\n                                Due Date\r\n                            </TableCell>\r\n                            <TableCell style={{color: \"#97A1A9\"}} className={classes.TCell}>\r\n                                Predicted Payment Date\r\n                            </TableCell>\r\n                            <TableCell style={{color: \"#97A1A9\"}} className={classes.TCell}>\r\n                                Predicted Ageing Bucket\r\n                            </TableCell>\r\n                            <TableCell style={{color: \"#97A1A9\"}} className={classes.TCell}>\r\n                                Notes\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {responseData.map((response)=>(\r\n                        \r\n                        <TableRow className={classes.TRow}\r\n                                hover\r\n                                onClick={(event) => handleClick(event, response.doc_id)} \r\n                                selected={isSelected(response.doc_id)}\r\n                                key={ response.doc_id }\r\n                        \r\n                        >\r\n                            <TableCell className={ classes.TCell } padding=\"checkbox\"> \r\n                                <Checkbox checked={isSelected(response.doc_id)}/>\r\n                            </TableCell>\r\n                            <TableCell className={classes.TCell}>\r\n                                {response.name_customer}\r\n                            </TableCell >\r\n                            <TableCell  className={classes.TCell}>\r\n                                {response.cust_number}\r\n                            </TableCell>\r\n                            <TableCell  className={classes.TCell}>\r\n                                {response.doc_id}\r\n                            </TableCell >\r\n                            <TableCell   className={classes.TCell}>\r\n                                {/* {formatter(response.total_open_amount)} */}\r\n                                {response.total_open_amount}\r\n                            </TableCell>\r\n                            <TableCell className={classes.TCell}>\r\n                            {response.due_in_date}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\" className={classes.TCell}>\r\n                                --\r\n                            </TableCell>\r\n                            <TableCell align=\"left\" className={classes.TCell}>\r\n                                --\r\n                            </TableCell>\r\n                            <TableCell className={classes.TCell}>\r\n                                {response.notes}\r\n                            </TableCell>\r\n                            \r\n                        </TableRow>\r\n                    ))}\r\n                    </TableBody>\r\n                    </Table>\r\n                </InfiniteScroll>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default TableComponent;","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\TableGrid.js",["113","114"],"import Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport React, { useEffect } from 'react'\r\n\r\nimport axios from \"axios\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    maxWidth: \"100%\",\r\n    maxHeight: 350,\r\n  },\r\n\r\n  table:{\r\n    margin: 0,\r\n    padding: 0,\r\n    backgroundColor: \"#273D49CC\"\r\n  }\r\n});\r\n\r\n\r\nfunction TableGrid() {\r\n\r\n  let [responseData, setResponseData] = React.useState([]);\r\n  let [isNext, setIsNextFunc] = React.useState(false);\r\n  let [pageCount, setCount] = React.useState(1);\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:8080/1805262/FetchData.do?page=${pageCount}`\r\n      );\r\n      setResponseData([...responseData, ...response.data]);\r\n      setIsNextFunc(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, [pageCount]);\r\n\r\n  const classes = useStyles();\r\n\r\n  function fetchMoreData() {\r\n    setCount(pageCount + 1);\r\n  }\r\n\r\n  \r\n  return (\r\n    <div >\r\n      <InfiniteScroll\r\n        dataLength={responseData.length} //length of our responseData\r\n        next={fetchMoreData} //pass the function which will load more data\r\n        hasMore={isNext} //whether to call next component while scrolling or not.\r\n        loader={\r\n          <div\r\n            style={{ height: \"80%\", paddingLeft: \"5%\", overflow: \"hidden\" }}\r\n          >\r\n            <CircularProgress />\r\n          </div>\r\n        }\r\n        scrollableTarget=\"scrollableDiv\"\r\n      >\r\n        <div >\r\n          <TableContainer component={Paper}  className={classes.container} id=\"scrollableDiv\">\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n              <TableHead className={classes.table}>\r\n                <TableRow  size=\"size\" hover role=\"checkbox\">\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} padding=\"checkbox\">\r\n                        <Checkbox/>\r\n                      </TableCell>\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} >Customer Name</TableCell>\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} align=\"right\">Customer #</TableCell>\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} align=\"right\">Invoice #</TableCell>\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} align=\"right\">Invoice Amount</TableCell>\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} align=\"right\">Due Date</TableCell>\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} align=\"right\">predicted payment date</TableCell>\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} align=\"right\">predicted aging bucket</TableCell>\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#97A1A9\"}} align=\"center\">Notes</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {responseData.map((row, index) => (\r\n                  <TableRow key={index} hover role=\"checkbox\">\r\n                  <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} padding=\"checkbox\">\r\n                        <Checkbox/>\r\n                      </TableCell>\r\n                    <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} component=\"th\" scope=\"row\">\r\n                      {row.name_customer}\r\n                    </TableCell> \r\n                    <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} align=\"right\">{row.cust_number}</TableCell>\r\n                    <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} align=\"right\">{row.doc_id}</TableCell>\r\n                    <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} align=\"right\">{row.total_open_amount}</TableCell>\r\n                    <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} align=\"right\">{row.due_in_date}</TableCell>\r\n                    <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} align=\"center\">--</TableCell>\r\n                    <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} align=\"center\">--</TableCell>\r\n                    <TableCell style={{backgroundColor: \"#273D49CC\", color: \"#FFFFFF\"}} align=\"right\">{row.notes}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n    </TableContainer>\r\n        </div>\r\n      </InfiniteScroll>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TableGrid\r\n\r\n","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\GridModalButtons.js",["115"],"import React from 'react'\r\nimport PredictButton from './PredictButton'\r\nimport CorrespondenceButton from '../components/CorrespondenceButton'\r\nimport AddButton from '../components/AddButton'\r\nimport EditButton from '../components/EditButton'\r\nimport DeleteButton from '../components/DeleteButton'\r\nimport {TextField, InputBase} from '@material-ui/core';\r\nimport './GridModalButtons.css'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        border: \"1px solid #97A1A9\",\r\n        backgroundColor : \"#273D49CC\",\r\n        borderRadius: theme.shape.borderRadius,\r\n        paddingLeft: \"7px\",\r\n        paddingRight: \"7px\",\r\n        paddingTop: \"2px\",\r\n        paddingBottom: \"2px\"\r\n    }\r\n    \r\n  }));\r\n\r\nfunction GridModalButtons() {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className='GridButtons'>\r\n            <div className='left__buttons'>\r\n                <span className='predict'><PredictButton/></span>\r\n                <span className='correspondence'><CorrespondenceButton/></span>\r\n            </div>\r\n\r\n            <div className='right__buttons'>\r\n                <span className='add'><AddButton/></span>\r\n                <span className='edit'><EditButton/></span>\r\n                <span className='delete'><DeleteButton/></span>\r\n                \r\n                <form className='form__text' noValidate autoComplete=\"off\">\r\n                    <InputBase className = {classes.root} style={{backgroundColor: \"#283A46\", color: \"#fff\"}} id=\"outlined-basic\" placeholder=\"search by invoice number\" variant=\"outlined\" size=\"small\" />\r\n                    {/* <TextField className = {classes.root} style={{backgroundColor: \"#283A46\", color: \"#fff\"}} id=\"outlined-basic\" label=\"search by invoice number\" variant=\"outlined\" size=\"small\" /> */}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridModalButtons\r\n","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\utils\\formatter.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\AddButton.js",["116","117","118","119","120","121","122","123","124"],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\DeleteButton.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\EditButton.js",["125"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport './AddButton.css'\r\nimport icon from '../assets/baseline-close-24px.svg'\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        color: 'white',\r\n        borderRadius: '8px',\r\n        borderColor: '#14AFF1'\r\n    },\r\n  });\r\n\r\n\r\nexport default function EditButton() {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const [invoice, SetInvoice] = React.useState(\"56354.52\")\r\n  const [notes, SetNotes] = React.useState(\"Lorem Ipsum amet\")\r\n\r\n  const handleChangeInvoice = (event) => {\r\n    SetInvoice(event.target.value)\r\n  }\r\n\r\n  const handleChangeNotes = (event) => {\r\n    SetNotes(event.target.value)\r\n  }\r\n\r\n  const handleReset = (e) => {\r\n    SetInvoice(\"56354.52\")\r\n    SetNotes(\"Lorem Ipsum amet\")\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  return (\r\n\r\n    <div className='add__button'>\r\n      <Button className={classes.root} variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        <EditIcon/>Edit\r\n      </Button>\r\n        <Dialog maxWidth=\"xl\" open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle style={{backgroundColor: \"#2A3E4C\", color: \"#FFFFFF\",borderBottom: \"1px solid #1A262F\", position:\"relative\"}}  id=\"form-dialog-title\">Edit invoice\r\n                <a href=\"app.js\"> <img style={{position:\"absolute\", right:\"0\", marginRight:\"20px\", marginTop:\"2px\", cursor:\"pointer\"}} src={icon} alt=\"\"/></a>\r\n            </DialogTitle>\r\n            \r\n            <div style={{backgroundColor: \"#2A3E4C\", color: \"#97A1A9\"}}  className='main__div'>\r\n                <div className='add__data__one'>\r\n                    <DialogContent style={{display: \"flex\", alignItems: \"start\", justifyContent:\"space-between\"}}>\r\n                    <span style={{paddingTop: \"10px\"}}>Invoice_Amount</span>\r\n                     \r\n                    <TextField style={{ marginLeft:\"10px\", backgroundColor: \"#283A46\", border: \"0.2px solid #356680\", borderRadius: \"4px\", color: \"#fff\"}}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        label=\"\"\r\n                        type=\"number\"\r\n                        variant=\"outlined\"\r\n                        onChange = {handleChangeInvoice}\r\n                        value={invoice}\r\n                    />\r\n                    </DialogContent>\r\n\r\n                    <DialogContent style={{display: \"flex\", alignItems: \"start\", justifyContent:\"space-between\"}}>\r\n                    <span style={{paddingTop: \"10px\"}}>Notes</span>             \r\n                        <TextField\r\n                        style={{marginTop: \"9px\", marginLeft:\"10px\",backgroundColor: \"#283A46\", border: \"0.2px solid #356680\", borderRadius: \"4px\"}}\r\n                            id=\"filled-multiline-static\"\r\n                            autofocus\r\n                            multiline\r\n                            rows={4}\r\n                            variant=\"outlined\"\r\n                            value=\"Lorem Ipsum\"\r\n                            onChange = {handleChangeNotes}\r\n                          value={notes}\r\n                        />\r\n                    </DialogContent>\r\n                </div>\r\n            </div>\r\n\r\n            <DialogActions style={{backgroundColor: \"#2A3E4C\", display: \"flex\", justifyContent: \"space-between\" , borderTop: \"1px solid #1A262F\", padding: \"15px\"}} >\r\n            <span onClick={handleClose} style={{color: \"#14AFF1\", cursor:'pointer'}}>Cancel</span>\r\n            <div>\r\n            <Button onClick={handleReset} className={classes.root} variant=\"outlined\" color=\"primary\">\r\n                Reset\r\n            </Button>\r\n            <Button onClick={handleClose} style={{color: 'white', borderRadius: '8px',marginLeft:\"15px\", backgroundColor: \"#14AFF1\"}} variant=\"contained\" >\r\n                Save\r\n            </Button>\r\n            </div>\r\n            </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    // </div>\r\n    \r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\CorrespondenceButton.js",[],"C:\\Users\\KIIT\\Desktop\\hrc_assignment\\Summer_Internship_UI\\src\\components\\PredictButton.js",[],{"ruleId":"126","severity":1,"message":"127","line":6,"column":10,"nodeType":"128","messageId":"129","endLine":6,"endColumn":18},{"ruleId":"126","severity":1,"message":"130","line":8,"column":10,"nodeType":"128","messageId":"129","endLine":8,"endColumn":20},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"126","severity":1,"message":"135","line":6,"column":35,"nodeType":"128","messageId":"129","endLine":6,"endColumn":40},{"ruleId":"126","severity":1,"message":"136","line":6,"column":42,"nodeType":"128","messageId":"129","endLine":6,"endColumn":48},{"ruleId":"126","severity":1,"message":"137","line":7,"column":10,"nodeType":"128","messageId":"129","endLine":7,"endColumn":21},{"ruleId":"126","severity":1,"message":"138","line":40,"column":9,"nodeType":"128","messageId":"129","endLine":40,"endColumn":16},{"ruleId":"126","severity":1,"message":"139","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":13},{"ruleId":"126","severity":1,"message":"140","line":3,"column":8,"nodeType":"128","messageId":"129","endLine":3,"endColumn":13},{"ruleId":"126","severity":1,"message":"138","line":32,"column":11,"nodeType":"128","messageId":"129","endLine":32,"endColumn":18},{"ruleId":"126","severity":1,"message":"141","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":17},{"ruleId":"126","severity":1,"message":"142","line":3,"column":28,"nodeType":"128","messageId":"129","endLine":3,"endColumn":31},{"ruleId":"126","severity":1,"message":"143","line":3,"column":43,"nodeType":"128","messageId":"129","endLine":3,"endColumn":49},{"ruleId":"126","severity":1,"message":"139","line":3,"column":51,"nodeType":"128","messageId":"129","endLine":3,"endColumn":56},{"ruleId":"126","severity":1,"message":"144","line":3,"column":121,"nodeType":"128","messageId":"129","endLine":3,"endColumn":128},{"ruleId":"126","severity":1,"message":"145","line":3,"column":130,"nodeType":"128","messageId":"129","endLine":3,"endColumn":144},{"ruleId":"126","severity":1,"message":"146","line":3,"column":146,"nodeType":"128","messageId":"129","endLine":3,"endColumn":155},{"ruleId":"126","severity":1,"message":"147","line":3,"column":157,"nodeType":"128","messageId":"129","endLine":3,"endColumn":166},{"ruleId":"126","severity":1,"message":"148","line":9,"column":8,"nodeType":"128","messageId":"129","endLine":9,"endColumn":17},{"ruleId":"149","severity":1,"message":"150","line":33,"column":7,"nodeType":"151","endLine":33,"endColumn":18,"suggestions":"152"},{"ruleId":"126","severity":1,"message":"153","line":68,"column":12,"nodeType":"128","messageId":"129","endLine":68,"endColumn":22},{"ruleId":"126","severity":1,"message":"154","line":69,"column":12,"nodeType":"128","messageId":"129","endLine":69,"endColumn":18},{"ruleId":"155","severity":1,"message":"156","line":91,"column":32,"nodeType":"157","messageId":"158","endLine":91,"endColumn":34},{"ruleId":"155","severity":1,"message":"156","line":94,"column":37,"nodeType":"157","messageId":"158","endLine":94,"endColumn":39},{"ruleId":"126","severity":1,"message":"159","line":106,"column":11,"nodeType":"128","messageId":"129","endLine":106,"endColumn":28},{"ruleId":"149","severity":1,"message":"160","line":37,"column":13,"nodeType":"161","endLine":47,"endColumn":4},{"ruleId":"149","severity":1,"message":"162","line":47,"column":6,"nodeType":"151","endLine":47,"endColumn":17,"suggestions":"163"},{"ruleId":"126","severity":1,"message":"146","line":7,"column":9,"nodeType":"128","messageId":"129","endLine":7,"endColumn":18},{"ruleId":"126","severity":1,"message":"147","line":3,"column":20,"nodeType":"128","messageId":"129","endLine":3,"endColumn":29},{"ruleId":"164","severity":1,"message":"165","line":81,"column":31,"nodeType":"166","endLine":81,"endColumn":40},{"ruleId":"164","severity":1,"message":"165","line":85,"column":30,"nodeType":"166","endLine":85,"endColumn":38},{"ruleId":"164","severity":1,"message":"165","line":98,"column":27,"nodeType":"166","endLine":98,"endColumn":43},{"ruleId":"164","severity":1,"message":"165","line":102,"column":27,"nodeType":"166","endLine":102,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":115,"column":27,"nodeType":"166","endLine":115,"endColumn":46},{"ruleId":"164","severity":1,"message":"165","line":119,"column":27,"nodeType":"166","endLine":119,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":132,"column":27,"nodeType":"166","endLine":132,"endColumn":46},{"ruleId":"164","severity":1,"message":"165","line":136,"column":27,"nodeType":"166","endLine":136,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":89,"column":27,"nodeType":"166","endLine":89,"endColumn":40},"no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'withStyles' is defined but never used.","no-native-reassign",["167"],"no-negated-in-lhs",["168"],"'Route' is defined but never used.","'Switch' is defined but never used.","'ROLL_NUMBER' is defined but never used.","'classes' is assigned a value but never used.","'Paper' is defined but never used.","'theme' is defined but never used.","'TableGrid' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'Toolbar' is defined but never used.","'InputAdornment' is defined but never used.","'TextField' is defined but never used.","'InputBase' is defined but never used.","'formatter' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'responseData' and 'url'. Either include them or remove the dependency array. You can also do a functional update 'setResponseData(r => ...)' if you only need 'responseData' in the 'setResponseData' call.","ArrayExpression",["169"],"'editActive' is assigned a value but never used.","'active' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleSortRequest' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'responseData'. Either include it or remove the dependency array. You can also do a functional update 'setResponseData(r => ...)' if you only need 'responseData' in the 'setResponseData' call.",["170"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},"Update the dependencies array to be: [pageCount, responseData, url]",{"range":"175","text":"176"},"Update the dependencies array to be: [pageCount, responseData]",{"range":"177","text":"178"},[1171,1182],"[pageCount, responseData, url]",[1371,1382],"[pageCount, responseData]"]